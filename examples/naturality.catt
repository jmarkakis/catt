# Naturality wrt codim 1 variables
## coherence wrt a cdim 1 variable

coh natid (x-(x>)x+) : comp x> (id x+) -> comp (id x-) x>


let srca (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp f (comp g h)
let tgta (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp (comp f g) h
coh assoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w):
  srca f g h ->  tgta f g h

coh natassoc (x : *) (y : *) (f : x -> y) (z : *) (g- : y -> z) (g+ : y -> z) (g> : g- -> g+) (w : *) (h : z -> w) :
    comp (srca f [g>] h) (assoc f g+ h) -> comp (assoc f g- h) (tgta f [g>] h)

let srcu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp (comp f g) h
let tgtu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp f g h
coh unbiase (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) :
    srcu f g h ->  tgtu f g h

coh natunbiase (x : *) (y : *) (f : x -> y) (z : *) (g- : y -> z) (g+ : y -> z) (g> : g- -> g+) (w : *) (h : z -> w) :
    comp (srcu f [g>] h) (unbiase f g+ h) -> comp (unbiase f g- h) (tgtu f [g>] h)


let wiskl (x : *) (y : *) (f : x -> y) (z : *) (g- : y -> z) (g+ : y -> z) (g> : g- -> g+) = comp f [g>]
coh natwhiskl (x : *) (y : *) (f- : x -> y) (f+ : x -> y) (f> : f- -> f+) (z : *) (g- : y -> z) (g+ : y -> z) (g> : g- -> g+) :
    comp (comp [f>] g-) (comp f+ [g>]) -> comp (comp f- [g>]) (comp [f>] g+)

## coherence with a codim 0 variable substituted by a codim 1 term
### helper fucntion: the cylindrical composite
coh assoc- (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w): comp (comp f g) h -> comp f (comp g h)
coh natid (x(f)y) : comp f (id y) -> comp (id x) f
let cyl (x- : *)(y- : *)(z- : *)(f- : x- -> y-)(g- : y- -> z-)
        (x+ : *)(y+ : *)(z+ : *)(f+ : x+ -> y+)(g+ : y+ -> z+)
        (x> : x- -> x+) (y> : y- -> y+) (z> : z- -> z+)
        (a : comp x> f+ -> comp f- y>) (b : comp y> g+ -> comp g- z>) =
        comp
          (assoc x> f+ g+)
          (comp [a] g+)
          (assoc- f- y> g+)
          (comp f- [b])
          (assoc f- g- z>)

### actual computations:

#### nat (comp (assoc) (unbiase))
let natau (x : *) (y : *) (f : x -> y) (z : *) (g- : y -> z) (g+ : y -> z) (g> : g- -> g+) (w : *) (h : z -> w) =
cyl (natassoc f g> h) (natunbiase f g> h)

#### nat (comp (id) (id))
let natii (x- : *) (x+ : *) (x> : x- -> x+) =
cyl (natid x>) (natid x>)

#### nat of other kinds of compositions
let c1 (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) = comp f [id g]

coh int (x(f)y(g(a)h(b)k)z) : comp f [comp a b] -> comp (comp f [a]) (comp f [b])
coh int- (x(f)y(g(a)h(b)k)z) : comp (comp f [a]) (comp f [b]) -> comp f [comp a b]
# let c' = something computed from the left whiskering functorialised at the right places
let natc1 (x : *) (y : *) (f : x -> y) (z : *) (g- : y -> z) (g+ : y -> z)(g> : g- -> g+)
    : comp (comp f [g>]) (c1 f g+) -> comp (c1 f g-) (comp f [g>])
    = comp (int- _ _ _) (comp f [[natid g>]]) (int _ _ _)


let c2 (x : *) (f : x -> x) = comp f [id f]
coh int (x(f(a)g)y(h(b)k(c)l)z) : comp [a] [comp b c] -> comp (comp f [b]) (comp [a] [c])
coh int- (x(f(a)g)y(h(b)k(c)l)z) : comp (comp [a] [b]) (comp g [c]) -> comp [a] [comp b c]
let natc2 (x : *) (f- : x -> x) (f+ : x -> x) (f> : f- -> f+)
    : comp (comp [f>] [f>]) (c2 f+) -> comp (c2 f-) (comp [f>] [f>])
    = comp (int- _ _ _) (comp [f>] [[natid f>]]) (int _ _ _)


let c3 (x : *) (f : x -> x) = comp f [comp (id f) (id f)]
let natc3 (x : *) (f- : x -> x) (f+ : x -> x) (f> : f- -> f+)
    : comp (comp [f>] [f>]) (c3 f+) -> comp (c3 f-) (comp [f>] [f>])
    = comp (int- _ _ _) (comp [f>] [[cyl (natid f>) (natid f>)]]) (int _ _ _)
