# First rule:
coh comp (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) : x -> z

# Second rule
coh assoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) :
  comp f (comp g h) -> comp (comp f g) h

# A few more examples
coh id (x : *) : x -> x

coh unitl (x : *) (y : *) (f : x -> y) : comp f (id y) -> f

# The let construction
let sq (x : *) (f : x -> x) = comp f f

# Suspension
let comp2 (x : *) (y : *) (f : x -> y) (g : x -> y) (h : x -> y) (a : f -> g) (b : g -> h) =
  comp a b

# Contexts as computads
let sq-id (x : *) (f : id x -> id x) = comp f f