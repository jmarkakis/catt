let srca (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp f (comp g h)
let tgta (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp (comp f g) h

coh assoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w): srca f g h ->  tgta f g h

let srcnata (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) = comp (srca f [m] k) (assoc f h k)
let tgtnata (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) = comp (assoc f g k) (tgta f [m] k)

coh natassoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) : srcnata f m k -> tgtnata f m k

coh natnatassoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (n : g -> h) (a : m -> n) (w : *) (k : z -> w) : comp (srcnata f [a] k) (natassoc f n k) -> comp (natassoc f m k) (tgtnata f [a] k)

coh nat2assoc (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (n : g -> h) (a : m -> n) (w : *) (k : z -> w) : comp (comp [srca f [[a]] k] (assoc f h k)) (natassoc f n k) -> comp (natassoc f m k) (comp (assoc f g k) [tgta f [[a]] k])

let srcu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp (comp f g) h
let tgtu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) = comp f g h

coh unbiase (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) : srcu f g h ->  tgtu f g h

let srcnatu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) = comp (srcu f [m] k) (unbiase f h k)
let tgtnatu (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) = comp (unbiase f g k) (tgtu f [m] k)

coh natunbiase (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) : srcnatu f m k -> tgtnatu f m k

coh natnatunbiase (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (n : g -> h) (a : m -> n) (w : *) (k : z -> w) : comp (srcnatu f [a] k) (natunbiase f n k) -> comp (natunbiase f m k) (tgtnatu f [a] k)

coh assoc- (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w): comp (comp f g) h -> comp f (comp g h)

let cyl (x- : *)(y- : *)(z- : *)(f- : x- -> y-)(g- : y- -> z-)
        (x+ : *)(y+ : *)(z+ : *)(f+ : x+ -> y+)(g+ : y+ -> z+)
        (xA : x- -> x+) (yA : y- -> y+) (zA : z- -> z+)
        (a : comp xA f+ -> comp f- yA) (b : comp yA g+ -> comp g- zA) =
        comp
          (assoc xA f+ g+)
          (comp [a] g+)
          (assoc- f- yA g+)
          (comp f- [b])
          (assoc f- g- zA)

let natcomp (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (w : *) (k : z -> w) =
cyl (natassoc f m k) (natunbiase f m k)

# let cyl2 (x- : *)(y- : *)(z- : *)(f- : x- -> y-)(g- : y- -> z-)
#          (x+ : *)(y+ : *)(z+ : *)(f+ : x+ -> y+)(g+ : y+ -> z+)
#          (xA- : x- -> x+) (yA- : y- -> y+) (zA- : z- -> z+)
#          (xA+ : x- -> x+) (yA+ : y- -> y+) (zA+ : z- -> z+)
#          (xAA : xA- -> xA+) (yAA : yA- -> yA+) (zAA : zA- -> zA+)
#          (a- : comp xA- f+ -> comp f- yA-) (b- : comp yA- g+ -> comp g- zA-)
#          (a+ : comp xA+ f+ -> comp f- yA+) (b- : comp yA+ g+ -> comp g- zA+)
#          (aA : comp a- (comp f- [yAA]) -> comp (comp [xAA] f+) a+)
#          (bA : comp b- (comp g- [zAA]) -> comp (comp [yAA] g+) b+) =




let natnatcomp (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (m : g -> h) (n : g -> h) (a : m -> n) (w : *) (k : z -> w) =
cyl (natnatassoc f a k) (natnatunbiase f a k)
