### Functoriality does not support the second coherence rule yet

coh id (x : *) : x -> x
# let transport (x : *) (y : *) (f : x -> y) = id [f]
coh comp (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) : x -> z
let whiskl (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                   (z : *) (g : y -> z) =
		   comp [a] g
let whiskr (x : *) (y : *) (f : x -> y)
                   (z : *) (g : y -> z) (g' : y -> z) (a : g -> g') =
		   comp f [a]
let horiz (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                  (z : *) (g : y -> z) (g' : y -> z) (b : g -> g') =
		  comp [a] [b]

let compbis (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) =
comp f g

let whisklbis (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                   (z : *) (g : y -> z) =
		   compbis [a] g
let whiskrbis (x : *) (y : *) (f : x -> y)
                   (z : *) (g : y -> z) (g' : y -> z) (a : g -> g') =
		   compbis f [a]
let horizbis (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                  (z : *) (g : y -> z) (g' : y -> z) (b : g -> g') =
		  compbis [a] [b]

coh comp3 (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (w : *) (h : z -> w) : x -> w
let test1 (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                 (z : *) (g : y -> z)
		 (w : *) (h : z -> w) (h' : z -> w) (c : h -> h') =
		 comp3 [a] g [c]
let test2 (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f')
                 (z : *) (g : y -> z) (g' : y -> z) (b : g -> g')
		 (w : *) (h : z -> w) (h' : z -> w) (c : h -> h') =
		 comp3 [a] [b] [c]

let sq (x : *) (f : x -> x) =
       	       comp f f
let testsq (x : *) (f : x -> x) (g : x -> x) (a : f -> g) =
    	      	sq [a]

let double-whiskl (x : *) (y : *) (f : x -> y) (f' : x -> y) (a : f -> f') (a' : f -> f') (b : a -> a')
                  (z : *) (g : y -> z) =
		  whiskl [b] g


coh id3@2 (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) :
    comp3 f (id y) g -> comp f g


### Test bug in naming
coh comp5 (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6):
x1 -> x6

coh focus2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4) :
		    comp (comp f1 f2) (comp f3 f4) -> comp3 f1 (comp f2 f3) f4


let simpl2 (x0 : *) (x1 : *) (x2 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	   (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	   comp3 (comp3 f1 [s2] f4)
	   	 (id3@2 f1 f4)
		 s1

let simpl2F (x0 : *) (x1 : *) (x2 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	    (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	    comp (focus2 f1 f2 f3 f4)
	    	 (simpl2 s1 s2)

coh id5@3F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp5 f1 f2 (id x3) f3 f4 -> comp3 f1 (comp f2 f3) f4

coh id5@3F- (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp3 f1 (comp f2 f3) f4 -> comp5 f1 f2 (id x3) f3 f4

coh id5@3FU (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp (id5@3F f1 f2 f3 f4) (id5@3F- f1 f2 f3 f4) -> id (comp5 f1 f2 (id x3) f3 f4)

coh rew5comp@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                        (x2 : *) (f2 : x1 -> x2)
		        (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		                                 (h3 : x2 -> x3) (b : g3 -> h3)
		        (x4 : *) (f4 : x3 -> x4)
		        (x5 : *) (f5 : x4 -> x5) :
		        comp (comp5 f1 f2 [a] f4 f5) (comp5 f1 f2 [b] f4 f5) -> comp5 f1 f2 [comp a b] f4 f5

coh rew5id@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)
		      (x3 : *) (f3 : x2 -> x3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5) :
		      comp5 f1 f2 [id f3] f4 f5 -> id (comp5 f1 f2 f3 f4 f5)

coh rrew5@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		       	    	     	    	     	      (b : f3 -> g3) (c : a -> b)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5) :
		     comp5 f1 f2 [a] f4 f5 -> comp5 f1 f2 [b] f4 f5


let simplrew5 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2)
	      (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3) (b : g3 -> f3) (abU : comp a b -> id f3)
	      (f4 : x3 -> x4) (f5 : x4 -> x5)  =
comp3 (rew5comp@3 f1 f2 a b f4 f5)
      (rrew5@3 f1 f2 abU f4 f5)
      (rew5id@3 f1 f2 f3 f4 f5)

let red3U (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	  (sU : comp s1 s2 -> id (comp f3 f4))
	  (f5 : x2 -> x3) (f6 : x3 -> x4)
# :  comp (red3 f1 f2 s1 f5 f6) (red3- f1 f2 s2 f5 f6) -> id (comp5 f1 f2 (comp f3 f4) f5 f6) =
 = simpl2F (simplrew5 f1 f2 sU f5 f6)
	(id5@3FU f1 f2 f5 f6)
