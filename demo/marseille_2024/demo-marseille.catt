######## Intro ########
# catt est un assistant à la preuve dédié aux ω-catégories faibles. Il permet de
# définir des cohérences (opérations primitives), ainsi que des termes
# (opérations complexes). D'un point de vue théorique, ce sont les éléments
# d'une ω-catégorie librement engendrée par un polygraphe.

######## Résultats 1-categoriques ########
# Commençons par formaliser la construction de quelques cellules  1-catégoriques
# bien reconnaissables

#### cohérences de composition ####
# syntax: `coh string ps : type`
# string = nom de la coherence
# ps = diagramme de composition, décrit par un parenthésage
# type = type du résultat. La source du type doit contenir toutes les variables
#        sources, le but du type doit contenir toutes les variables but.

# composition binaire
coh comp2 (x(f)y(g)z) : x -> z

# composition ternaire
coh comp3 (x(f)y(g)z(h)w) : x -> w


#### cohérences ####
# syntax: `coh string ps : type`
# string = nom de la coherence
# ps = diagramme de composition, décrit par un parenthésage
# type = type du résultat, devant contenir toute les variables du diagramme.

# identité
coh identity (x) : x -> x

# associateur
coh assoc (x(f)y(g)z(h)w) : comp2 f (comp2 g h) -> comp2 (comp2 f g) h

# uniteurs
coh unitl (x(f)y) : comp2 f (identity _) -> f
coh unitr (x(f)y) : comp2 (identity _) f -> f

#### Définitions de termes ####
# catt permet aussi des termes construits à partir des cohérences définies.
# Syntaxe: `let string ctx = term`
# string = nom du terme
# ctx = contexte de définition, qui est aussi la description d'un polygraphe
# term = définition du terme

# carré d'un endomorphisme
let square (x : *) (f : x -> x) = comp2 f f

# on peut aussi préciser le type
# Syntaxe: `let string ctx : type = term`
# string = nom du terme
# ctx = contexte de définition, qui est aussi la description d'un polygraphe
# type = type du terme défini
# term = définition du terme

# cube d'un endomorphisme
let cube (x : *) (f : x -> x) : x -> x = comp3 f f f


#### Builtins ####
# la cohérence identité est connue du système sous le nom `id`. La composition
# n-aire est connue sous le nom `comp`. L'arité de la composition est résolue
# par le système

# par exemple, l'associateur se réécrit comme:
coh assoc-builtins (x(f)y(g)z(h)w) : comp f (comp g h) -> comp (comp f g) h

# le nom ou la méthode de la cohérence de la cohérence n'importe pas, seule la
# définition importe
let id-assoc (x : *) (y : *) (z : *) (w : *)
             (f : x -> y) (g : y -> z) (h : z -> w)
             : assoc f g h -> assoc-builtins f g h
             = id (assoc f g h)


######## Montée en dimension ########
# catt peut être utilisé pour formaliser des cellules de plus haute dimension.
# Regardons les cellules de composition en dimension 2

# composition verticale
coh vert (x(f(a)g(b)h)y) : f -> h

# composition horizontale
coh horiz (x(f(a)g)y(h(b)k)z) : comp f h -> comp g k



# Ces cellules sont aussi soumises à des cohérences, telles que l'associativité,
# l'unitalité, etc. Mais une nouvelle sorte de cohérence apparaît en dimension
# 2 appelée la loi d'échange
coh exch (x(f(a)g(b)h)y(k(c)l(d)m)z) :
    vert (horiz a c) (horiz b d) -> horiz (vert a b) (vert c d)


#### Suspension ####
# La suspension est un moyen de relever une cohérence ou un terme d'une
# dimension à la suivante. Intuitivement, cela revient à remplacer formellement
# le type de base * en un type flèche, de la même manière qu'il est possible
# dans MLTT de définir la transitivité de l'égalité et l'utiliser quand le
# type de base lui-même est un type identité. Sémantiquement, la suspension
# d'une opération correspond à considérer la même opération dans la structure
# ω-catégorique d'un hom-(ensemble globulaire).

# Par défaut, la suspension est implicite, mais on peut la désactiver
set implicit_suspension = f

# Syntaxe : `! nom args`
# nom = nom de la cohérence ou du terme appliqué
# args = arguments du terme

# Par exemple, la composition verticale peut être obtenue comme la suspension de
# la composition
let comp-vert (x : *) (y : *)
              (f : x -> y) (g : x -> y) (h : x -> y)
              (a : f -> g) (b : g -> h) =
              ! comp a b


#### Suspension suite ####
# L'intérêt de la suspension est de pouvoir suspendre aussi les cohérences, par
# exemple il est possible d'obtenir l'associativité de la composition verticale
# par suspension de l'associativité
let assoc-vert (x : *) (y : *)
               (f : x -> y) (g : x -> y) (h : x -> y) (k : x -> y)
               (a : f -> g) (b : g -> h) (c : h -> k) :
               comp-vert a (comp-vert b c) -> comp-vert (comp-vert a b) c =
               ! assoc a b c

# La suspension peut être rendue implicite, il n'est alors pas nécessaire de
# l'écrire et cela simplifie beaucoup les termes
set implicit_suspension = t

let assoc-vert-implicite (x : *) (y : *)
                         (f : x -> y) (g : x -> y) (h : x -> y) (k : x -> y)
                         (a : f -> g) (b : g -> h) (c : h -> k) :
                         comp a (comp b c) -> comp (comp a b) c =
                         assoc a b c

# On avait en fait déjà utilisé secrètement la suspension:
let id-assoc (x : *) (y : *) (z : *) (w : *)
             (f : x -> y) (g : y -> z) (h : z -> w)
             : assoc f g h -> assoc-builtins f g h
             = id (assoc f g h)

######## FIN -- Lancer Catt et Démo Coq ########
